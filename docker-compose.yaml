services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-my-postgres-password}"
      POSTGRES_DB: "${POSTGRES_DB:-testdb}"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      internship-network:

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SERVER_PORT: "${SERVER_PORT:-8080}"
      SPRING_DATASOURCE_URL: "${SPRING_DATASOURCE_URL:-jdbc:postgresql://postgres:5432/testdb}"
      SPRING_DATASOURCE_USERNAME: "${SPRING_DATASOURCE_USERNAME:-postgres}"
      SPRING_DATASOURCE_PASSWORD: "${SPRING_DATASOURCE_PASSWORD:-my-postgres-password}"
      SPRING_JPA_HIBERNATE_DDL_AUTO: "${SPRING_JPA_HIBERNATE_DDL_AUTO:-update}"
    command: ["./wait-for-it.sh", "postgres:5432", "--timeout=60", "--", "java", "-jar", "app.jar"]
    networks:
      internship-network:
    ports:
      - "${BACKEND_PORT:-8080}:8080"

  frontend:
    build:
      context: ./frontend
      dockerfile: "${FRONTEND_DOCKERFILE:-Dockerfile.dev}"
    container_name: "${FRONTEND_CONTAINER_NAME:-frontend-dev}"
    depends_on:
      - backend
    networks:
      internship-network:
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    command: ["npm", "run", "dev"]

volumes:
  postgres-data:

networks:
  internship-network:
    driver: bridge